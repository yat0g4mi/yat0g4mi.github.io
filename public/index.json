
[{"content":"Hello ! My name is yatogami (aka kozybear), my major is Cyber Security. I play CTF from August 2023 until now, and I’m a member of Huntik team and TAS_DihydroMonoxide\nI’m a newbie and always want to learn about Cyber Security - specially is DFIR. Thanks for reading my blog. Hope you can find something helpful in here!!!\n","date":"2 December 2024","externalUrl":null,"permalink":"/about/","section":"No Exist","summary":"\u003cp\u003eHello ! My name is yatogami (aka kozybear), my major is Cyber Security. I play CTF from August 2023 until now, and I’m a member of \u003ca href=\"\"\u003eHuntik team\u003c/a\u003e and \u003ca href=\"\"\u003eTAS_DihydroMonoxide\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI’m a newbie and always want to learn about Cyber Security - specially is DFIR. Thanks for reading my blog. Hope you can find something helpful in here!!!\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"2 December 2024","externalUrl":null,"permalink":"/","section":"No Exist","summary":"","title":"No Exist","type":"page"},{"content":" Solution # 1. Forensics/The-conspirasy # Challenge give me 2 files : one is pcap, one is python code. I tried opening the pcap file to see what was there. At first glance, it contained TCP streams containing data in the form [x,y,z \u0026hellip;] with 2 types including numbers less than or equal to 100 and large numbers with 3 or more digits.\nRead the python code file further. That\u0026rsquo;s a way to encode and send data.\nimport csv sources, destinations, messages = [], [], [] with open(\u0026#39;chatlogs.csv\u0026#39;, mode=\u0026#39;r\u0026#39;) as file: csv_reader = csv.reader(file) for row in csv_reader: sources.append(row[0]) destinations.append(row[1]) messages.append(row[2]) def encrypt(message): messagenums = [] for character in message: messagenums.append(ord(character)) keys = [] for i in range(len(messagenums)): keys.append(random.randint(10, 100)) finalmessage = [] for i in range(len(messagenums)): finalmessage.append(messagenums[i] * keys[i]) return keys, finalmessage for i in range(len(messages)): finalmessage, keys = encrypt(messages[i]) print(finalmessage, keys) packet1 = IP(src=sources[i], dst=destinations[i])/TCP(dport=80)/Raw(load=str(finalmessage)) send(packet1) packet2 = IP(src=sources[i], dst=destinations[i])/TCP(dport=80)/Raw(load=str(keys)) send(packet2) The code performs three steps: 1 - Read data from CSV file: - Open chatlogs.csv. - Read rows from CSV file and save values ​​to sources, destinations, and messages. 2 - Encrypt function: - Convert each character in message to ASCII code and save to messagenums. - Create a list of keys containing random numbers from 10 to 100. - Encrypt the message by multiplying each ASCII value in messagenums by the corresponding key in keys. 3 - Send encrypted message and encryption key over the network: - For each message in messages, encrypt the message. - Create two packets: + The first packet contains the encrypted message (finalmessage). + The second packet contains the encryption keys (keys). - Send these packets over the network to their respective destinations using Scapy. To decode and get the original data, we do 2 steps: First, take the encrypted value and divide it by the key to get the original value, then convert the value from the corresponding ASCII value.Extract raw data from pcap file using tshark (I will find a way to filter it faster). tshark -r challenge.pcap -Y \u0026#34;tcp\u0026#34; -T fields -e tcp.payload \u0026gt; chatlogs.csv. Then simply decode hex, filter them into 2 files and use code to decode them. This my code to filter (after decode hex value). import re def process_lines(input_file, file_greater_than_500, file_less_than_or_equal_500): with open(input_file, \u0026#39;r\u0026#39;) as file: lines = file.readlines() with open(file_greater_than_500, \u0026#39;w\u0026#39;) as file1, open(file_less_than_or_equal_500, \u0026#39;w\u0026#39;) as file2: for line in lines: numbers = re.findall(r\u0026#39;\\d+\u0026#39;, line) if any(int(num) \u0026gt; 500 for num in numbers): file1.write(line) else: file2.write(line) process_lines(\u0026#39;chatlogs.csv\u0026#39;, \u0026#39;1.txt\u0026#39;, \u0026#39;2.txt\u0026#39;) And this is decrypt code : def decrypt(finalmessage, keys): original_message = [] for i in range(len(finalmessage)): original_char_code = finalmessage[i] // keys[i] original_message.append(chr(original_char_code)) return \u0026#39;\u0026#39;.join(original_message) def read_numbers_from_file(filename): numbers = [] with open(filename, \u0026#39;r\u0026#39;) as file: for line in file: line = line.strip() line = line.replace(\u0026#39;[\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;]\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) if line: numbers.extend(map(int, line.split(\u0026#39;,\u0026#39;))) return numbers finalmessage = read_numbers_from_file(\u0026#39;1.txt\u0026#39;) keys = read_numbers_from_file(\u0026#39;2.txt\u0026#39;) print(decrypt(finalmessage, keys)) FLAG : corctf{b@53d_af_f0r_th3_w1n}\n2. Forensics/Ilfiltration # The challenge requires answering some questions to get the flag, the challenge file is an event logs file. Since I am not familiar with using chainsaw, I only use 2 tools here, event viewer and EVTXeCMD.\nQ1: We'd like to confirm what the username of the main user on the target's computer is. Can you provide this information? ANSWER: slice1\nSOLVE: Just go through some facts and we will have the answer to this question or check EID: 4798 (User\u0026rsquo;s local group membership was enumerated.)\nQ2: Now, we'd like the name of the computer, after it was renamed. Ensure that it is entered in exactly how it is in the logs ANSWER: lemon-squeezer\nSOVLE: We can see it in EID 4673 (A privileged service was called) or other, like Q1.\nQ3: Great work! In order to prevent their lemons from moulding, the lemonthinkers changed the maximum password age. What is this value? Please enter it as an integer number in days\nANSWER: 83\nSOLVE: Check EID 4739 (Domain Policy was changed). Actually I didn\u0026rsquo;t check EID 4739 immediately, I used another way which is to use EVTXeCMD to convert the evtx file to a csv file, then grep \u0026ldquo;age\u0026rdquo;. You can see the 2 numbers are 42 and 83, but the correct answer is 83. Check the evtx file just to be sure.\nQ4: It seems that our targets are incredibly smart, and turned off the antivirus. At what time did this happen? Give your answer as a UNIX timestamp\nANSWER: 1721946080\nSOLVE: This was a question that I was pretty clueless about. So when a member of my team answered it first, I knew I needed to check EID 4699 (A scheduled task was deleted) We can see here, in my local time it is 5:21:20 AM on the 26th, converted to UTC it is 22:21:20 on the 25th. Then just use Epoch Converter to convert to Unix time.\nQ5: The main lemonthinker, slice1, hasn't learnt from the-conspiracy and has (again) downloaded some malware on the system. What is the name of the user created by this malware? ANSWER: notabackdoor\nSOLVE: Check EID 4672 (Special privileges assigned to new logon), we can see it in first line. Q6: Finally, we'd like to know the name of the group that the user created by the malware is part of, which has the greatest security risk. What is this?\nANSWER: Administrator\nSOLVE: In this ques, i use Timeline Explorer and filter Username=notabackdoor, we can see in EID 4672 line : Administrative logon, so the answer is Administrator. FLAG: corctf{alw4y5_l3m0n_7h1nk_b3f0r3_y0u_c0mm1t_cr1m3}\n","date":"30 July 2024","externalUrl":null,"permalink":"/posts/corctf/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eSolution \n    \u003cdiv id=\"solution\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#solution\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1. Forensics/The-conspirasy \n    \u003cdiv id=\"1-forensicsthe-conspirasy\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-forensicsthe-conspirasy\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eChallenge give me 2 files : one is pcap, one is python code. I tried opening the pcap file to see what was there. At first glance, it contained TCP streams containing data in the form [x,y,z \u0026hellip;] with 2 types including numbers less than or equal to 100 and large numbers with 3 or more digits.\u003c/p\u003e","title":"corCTF 2024","type":"posts"},{"content":"","date":"30 July 2024","externalUrl":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics","type":"tags"},{"content":"","date":"30 July 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"30 July 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Solution # 1. Forensics/invoice # Challenge : Open file pdf,we can see: I use pdftotext to solve this. Just pdftotext invoice.pdf and we can read blacked out part. FLAG: CIT{Sir_Swaggy}\n2. Forensics/Beep Boop # Listening to the challenge file, a .wav file, I discovered it was morse code. Feeding it into the decoder, we get this string: INEVI63RENADIJSMFJJHKU3HKNVF4YJXHB4XOYL5. Use cyberchef, we get the flag : FLAG: CIT{q#@4\u0026amp;LRuSgSj^a78ywa}*\n3. Forensics/Sniff Sniff # Challenge gave me a pcap file. I was pretty confused with the multiple streams from the pcap file. I was about to give up but I saw so many people solving it. So I went back and looked at it again, scrolled to the bottom and tried to follow the last tcp stream. I saw the password part looked like base64, tried putting it into cyberchef, I got the right result. FLAG: CIT{iJ5B9s#lAp6iBNi6JtQ8}\n4.Osint/I\u0026rsquo;m as cold as a wise man # Challenge: Use GG lens, we can see some sites like this: Check again by GG maps: FLAG: CIT{coldfoot}\n5. Osint/Stalking 101 # Challenge: I was hanging around this challenge for a while, partly because I didn’t read the challenge properly. I tried searching all the social media platforms for the University of New Haven Chargers. I came up nothing, until I went to the university’s instagram, looked through the list of followers, and found him. Searching his insta name, we get account X. FLAG: CIT{@mossyblack818}\n6. Osint/Who even is that guy? # Challenge: From Amos\u0026rsquo;s insta, we can see person which Amos inspired:\nThe Osint challenge was the most frustrating one I have ever done. Hours spent in front of the computer, trying every angle in the photo but not a single clue about the person in the photo. I thought I would give up again. But no, I decided to try all the tools of the osintframework. And until I used Pimeyes, I was so overwhelmed, so happy that I jumped for joy. As we can see: With the blurred text, I immediately guessed that it was Satoshi - the person known as the creator of bitcoin.\nFLAG: CIT{satoshi}\n7. Osint/A conservative sandwich-heavy portfolio # Challenge: I had to wonder what the hell this challenge was. After digging through Amos\u0026rsquo; social media accounts, I suddenly remembered a picture I saw in the History section of a commit he made. I turned back to look at the picture, which I initially didn\u0026rsquo;t think would be relevant, and I smiled when I saw it.\nJust scan the qr code at the bottom of the book and you will get a link to the restaurant website. FLAG: CIT{Rubamba_restaurant}\n","date":"22 April 2024","externalUrl":null,"permalink":"/posts/cit@ctf/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eSolution \n    \u003cdiv id=\"solution\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#solution\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1. Forensics/invoice \n    \u003cdiv id=\"1-forensicsinvoice\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-forensicsinvoice\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eChallenge : \u003cbr\u003e\n\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"/assets/posts/CIT@CTF/Forensics/Invoice/chall.png\" alt=\"pic\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"CTF@CIT 2024","type":"posts"},{"content":"","date":"25 March 2024","externalUrl":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"Osint","type":"tags"},{"content":"Cre image: warlock smurf\nSolution # 1. Osint/Geo-Location # Challenge :\nPNG file:\nUsing GG image and focusing on the large building in the photo, we can see a number of matching images.\nI later identified it as the TCC Legacy Kincaid building. Check GG map and you will see it matches the image. It is located on Legacy Street,Texas.\nFLAG: texsaw{LEGACY_DRIVE}\n2. Forensics/The Forked Cave # Challenge:\nThe challenge gives us a git directory. Because I\u0026rsquo;ve done a similar challenge before, I used git log to check:\nAnd using command : git diff 02589c89210a9718a03992eec1a7da85e15c7c7d 9c6d7b5d77ba2f73fca83d026de1fe7904ce6e0b, we get the flag:\nFLAG: texsaw{git_g00d_or_git_d3ath}\n3. Forensics/PS2 games # Challenge :\nMy initial idea was to use code to filter out all games between 2000-2009, then check their platform-id. But after solving the challenge that way, I tried Workbench and it was much simpler. Just with the following SQL code:\nSELECT COUNT(DISTINCT Games.game_id) AS num_games FROM Games JOIN GamePlatforms ON Games.game_id = GamePlatforms.game_id JOIN Platforms ON GamePlatforms.platform_id = Platforms.platform_id WHERE Platforms.platform_name = \u0026#39;Playstation\u0026#39; AND YEAR(Games.release_date) BETWEEN 2000 AND 2009; FLAG: texsaw{42}\n4. Crypto/Freaky Flags # Challenge :\nPNG file:\nLuckily, I had just learned HTML and used Color Identity to determine the color of an image, so I immediately thought of trying it out. Each color will have 3 RGB values and I try to put them into ASCII decode. It works and I get the flag.\nFLAG: texsaw{the_flag_is_the_flag!}\n5. Osint/TrickyTree # A challenge that I initially thought I would give up on. But when there were about 5-6 hours left in the competition, I tried again. And this time thanks to the predecessors of the challenge, I have this link :\nBut guess what, of course it\u0026rsquo;s not that easy. I tried using a wayback machine but it didn\u0026rsquo;t work very well. Suddenly I thought of a website I used from the 0xL4ugh tournament, which is Archive.Today. I tried copying the link I just received and got the results:\nClick to see and we will see his father\u0026rsquo;s name. View profile and get date of birth.Thank all players who went first.\nFLAG: texsaw{09_02_1985}\n6. Forensics/Market Data # Challenge :\nI use the following SQL code to filter and get the correct results:\nSELECT SUM(revenue) AS total_revenue FROM ( SELECT od.game_id, SUM(od.quantity * od.subtotal) AS revenue, ROW_NUMBER() OVER (ORDER BY SUM(od.quantity * od.subtotal) DESC) AS revenue_rank FROM OrderDetails od JOIN Games g ON od.game_id = g.game_id JOIN Genres ge ON g.genre_id = ge.genre_id JOIN Orders o ON od.order_id = o.order_id WHERE ge.genre_name = \u0026#39;Action\u0026#39; -- Filter by Action genre AND YEAR(o.order_date) = 2023 -- Filter orders from 2023 GROUP BY od.game_id ) AS revenue_by_game WHERE revenue_rank = 5; -- Select the 5th ranked game\u0026#39;s revenue FLAG: texsaw{247.16}\n","date":"25 March 2024","externalUrl":null,"permalink":"/posts/texsawctf/","section":"Posts","summary":"\u003cp\u003eCre image: \u003ca href=\"https://warlocksmurf.github.io/$whoami/\" target=\"_blank\"\u003ewarlock smurf\u003c/a\u003e\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003eSolution \n    \u003cdiv id=\"solution\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#solution\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1. Osint/Geo-Location \n    \u003cdiv id=\"1-osintgeo-location\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-osintgeo-location\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eChallenge :\u003c/p\u003e","title":"Texsaw CTF","type":"posts"},{"content":" Solution # 1. Warmup/Flag Extraction # Challenge link Downloading the challenge, I get 1 rar file, then 1 string of tar files, I guess I extract 1 continuous sequence of file types. Use 7zip or whatever you can. At the end we get 1 gif file.\nTry strings \u0026ldquo;name-file.gif\u0026rdquo; | grep \u0026ldquo;INTIGRI\u0026rdquo; . Got flag:\n-\u0026gt; INTIGRITI{fl46_3x7r4c710n_c0mpl373}\n2. Warmup/Over the Wire 1 # Challenge Link\nI get 1 pcap file. People can have many ways but I use Wireshark. As always, I use tcp containing \u0026ldquo;flags\u0026rdquo; to check the flow of the file. I noticed 1 thread has info : RETR flag.zip.\nQuickly follow that stream and I see some important information.\nI was going to try File -\u0026gt; Export Objects, but there doesn\u0026rsquo;t seem to be anything in it. The only usable thing here is the password I found above. Then I tried : strings name-file.pcap | grep \u0026ldquo;flag\u0026rdquo; and getting 2 line seems to be a clue. The first is \u0026ldquo;flag.txt\u0026rdquo;. I used the binwalk with the pcap file and actually got 1 zip file. \u0026ldquo;Foremost\u0026rdquo; file pcap to receive the zip file, but it requires a key.I tried using the original password I found to open but failed. With the line \u0026ldquo;This flag is really important so I had to encrypt it in case it falls into the wrong hands\u0026rdquo; I reopen the wireshark and check which stream it belongs to. I got 1 message :\nI thought for a while and tried changing 2022 in the password to 2023 and got the flag.\nFLAG: INTIGRITI{1f_0nly_7h3r3_w45_4_53cur3_FTP}\n3. Warmup/Over the Wire 2 # Challenge Link\nAnother pcap challenge. I did the same as season 1 but got nothing. I tried again with File -\u0026gt; Export Objects. This time in the IMF section I see 4 .eml files. Try saving them all and viewing each file 1 (remember to save the file with the eml extension for easier reading). The first 2 files are nothing, just normal messages. 2 files after each file have 1 photo. I tried to download each photo and used the Stegano tools to see if I got anything. And in the 2nd image, I used the \u0026ldquo;binwalk\u0026rdquo; to check and saw that there was a zlib file . Using \u0026ldquo;zsteg\u0026rdquo; to check, we get the flag:\nFLAG: INTIGRITI{H1dd3n_Crypt0Cat_Purr}\n4. Misc/ZeChat # This was honestly one of the hardest challenges I\u0026rsquo;ve ever done. Only 7 teams solved this challenge, not including my team. I spent up to 8 hours solving this challenge by hand, including reading the article. You can read Chivato\u0026rsquo;s article to solve this problem. The binary string that I execute is:\n01001001 01001110 010101000 10010010 1000111 01010010 01001001 01010100 010010 0101111011 0111011100 1100110110 0011011010 0000110100 0011011101 0111110110 0100001101 0000110111 0011010001 0111110011 0011011011 1001 1000110011 0000011 001 0000110001 0110111000 1101100101 1111011001 1001110100 01 11011100 1000010010 0001001000 0101111101\nFLAG: INTIGRITI{w3ch47_d474_3nc0d1n6_ftw!!!}\n*Note: If you\u0026rsquo;re having trouble knowing where to start? And, I may have omitted some locations in the picture so my results may be a bit misleading. Please contact me if you encounter any of the above two situations or you have any other questions.\n","date":"30 November 2023","externalUrl":null,"permalink":"/posts/1337ctf/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eSolution \n    \u003cdiv id=\"solution\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#solution\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1. Warmup/Flag Extraction \n    \u003cdiv id=\"1-warmupflag-extraction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-warmupflag-extraction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ctf.intigriti.io/challenges#Over%20the%20Wire%20%28part%201%29-42\" target=\"_blank\"\u003eChallenge link\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"/assets/posts/1337/FlagExtraction/gif.png\" alt=\"Smile\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"1337CTF","type":"posts"},{"content":"","date":"30 November 2023","externalUrl":null,"permalink":"/tags/miscellanous/","section":"Tags","summary":"","title":"Miscellanous","type":"tags"},{"content":" 1.0x0 # Download and open the initial file, which is a regular image named \u0026ldquo;legit.png\u0026rdquo;.\nI tried using binwalk to check, and it seems there are some hidden files within it:\nAttempted to use binwalk and foremost to extract, but it seems unfeasible. I used zsteg:\nSpent quite some time here trying to find a way to extract that data. After a while, I found a way using the \u0026lsquo;dd\u0026rsquo; command. I used the following command to extract the data: dd if=legit.png bs=1 skip=$((0x96ef4)) of=out.\nUpon extraction, I noticed it was a PNG file. I removed the excess parts at the beginning, but it didn\u0026rsquo;t open correctly. Used: pngcheck -vv out.\nGot a 0x0 error. I searched for this error online and found a post by requroku / POCKekers, solving the CTF Killer Queen 2021. It seems the height and width of the image were changed to zero. Used the following Python code to find the correct height and width:\nfrom pwn import p32 from zlib import crc32 required_crc = 0x41305C20 max_dimension = 4000 for width in range(0, max_dimension): for height in range(0, max_dimension): ihdr = b\u0026#39;\\x49\\x48\\x44\\x52\u0026#39; + p32(width, endian=\u0026#39;big\u0026#39;) + p32(height, endian=\u0026#39;big\u0026#39;) + b\u0026#39;\\x08\\x06\\x00\\x00\\x00\u0026#39; if height % 100 == 0: print(\u0026#39;ihdr:\u0026#39;, ihdr.hex()) crc = crc32(ihdr) if crc == required_crc: print(\u0026#39;FOUND!\u0026#39;) print(width, height) exit() and we found:\nConvert the values to hex and fix:\nOpen the image again:\nFollowing the post mentioned earlier, I thought the next step was to use the stegsolve tool. Used it to check different color planes, and in the blue plane 1, we see:\nScanned the QR code and received the flag.\nFLAG: CHH{Im4g3_1n_1m@gE_1s_n1c3!!}\n","date":"15 November 2023","externalUrl":null,"permalink":"/posts/cookie-arena/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e1.0x0 \n    \u003cdiv id=\"10x0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#10x0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDownload and open the initial file, which is a regular image named \u0026ldquo;legit.png\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"/assets/posts/Cookie-Arena/legit.png\" alt=\"pic1\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"Cookie Arena","type":"posts"},{"content":"","date":"15 November 2023","externalUrl":null,"permalink":"/tags/steganography/","section":"Tags","summary":"","title":"Steganography","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]